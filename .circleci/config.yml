version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3

commands:
   # Exercise - Rollback
  destroy_environment:
      steps:
        - run:
            name: Destroy environment
            # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
            # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
            when: on_fail
            command: |
              aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}

# Define the jobs we want to run for this project
jobs:
  create_infrastructure: 
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Create Cloudformation Stack
            command: |
              aws cloudformation deploy \
                --template-file template.yml \
                --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
                --region us-east-1

  configure_infrastructure: 
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints:
              - "77:ea:c2:78:08:12:68:58:bc:ff:e9:4f:e7:6f:0b:1c"
        - run:
            name: Install Ansible
            command: |
              apk add --update ansible
        - run:
            name: Run Playbook and Configure server
            command: |
              ansible-playbook -i inventory main.yml

  # Exercise: Smoke Testing
  smoke_test:
        docker:
          - image: alpine:latest
        steps:
          - run: apk add --update curl
          - run:
              name: smoke test
              command: |
                URL="http://3.92.201.140:3000"
                # Test if website exists
                if curl -s --head ${URL} 
                then
                  echo "web access successful"
                  return 0
                else
                  echo "can't access website"
                  return 1
                fi
               
# Sequential workflow
workflows:
  # Name the workflow
  infrastructure_workflow:
    jobs:
      - configure_infrastructure
      - smoke_test:
          requires:
            - configure_infrastructure


