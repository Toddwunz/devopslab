version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3

commands:
   # Exercise - Rollback
  destroy_environment:
      steps:
        - run:
            name: Destroy environment
            # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
            # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
            when: on_fail
            command: |
              aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID}

# Define the jobs we want to run for this project
jobs:
  create_infrastructure: 
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Create Cloudformation Stack
            command: |
              aws cloudformation deploy \
                --template-file template.yml \
                --stack-name backend-${CIRCLE_WORKFLOW_ID} \
                --region us-east-1

  configure_infrastructure: 
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints:
              - "77:ea:c2:78:08:12:68:58:bc:ff:e9:4f:e7:6f:0b:1c"
        - run:
            name: Install Ansible
            command: |
              apk add --update ansible
        - attach_workspace:
            at: ~/
        - run:
            name: Run Playbook and Configure server
            command: |
              export EC2IP=$(cat ~/textfile.txt)
              ansible-playbook -i $EC2IP, main.yml

  # Exercise: Smoke Testing
  smoke_test:
        docker:
          - image: python:3.7-alpine3.11
        steps:
          - checkout
          - add_ssh_keys:
              fingerprints:
                - "77:ea:c2:78:08:12:68:58:bc:ff:e9:4f:e7:6f:0b:1c"
          - run:
              name: Install Ansible
              command: |
                apk add --update ansible curl
          - attach_workspace:
              at: ~/
          - run:
              name: smoke test
              command: |
                export EC2IP=$(cat ~/textfile.txt)
                URL="http://${EC2IP}:3000"
                # Test if website exists
                if curl -s --head ${URL}
                then
                  echo "web access successful"
                  return 0
                else
                  echo "can't access website"
                  return 1
                fi
          - destroy_environment
  get_EC2_IP:
        docker:
          - image: amazon/aws-cli
        steps:
          - checkout
          - run: yum install -y tar gzip
          - run:
              name: get new ec2 ip and save to inventory
              command: |
                aws ec2 describe-instances \
                --query "Reservations[*].Instances[*].PublicIpAddress" \
                --output=text > ~/textfile.txt
          - persist_to_workspace:
              root: ~/
              paths: 
                - textfile.txt
  create_and_deploy_front_end:
        docker:
          - image: amazon/aws-cli
        steps:
          - checkout
          - run:
              name: Execute bucket.yml - Create Cloudformation Stack
              command: |
                aws cloudformation deploy \
                --template-file bucket.yml \
                --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
                --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
          # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
          - run: aws s3 sync ./website s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete
  get_last_deployment_id:
        docker:
          - image: amazon/aws-cli
        steps:
          - checkout
          - run: yum install -y tar gzip
          - run:
              name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
              command: |
                aws cloudformation \
                list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
                --no-paginate --output text > ~/textfile.txt
          - persist_to_workspace:
              root: ~/
              paths: 
                - textfile.txt 
                
# Sequential workflow
workflows:
  # Name the workflow
  infrastructure_workflow:
    jobs:
    #  - create_infrastructure
    #  - get_EC2_IP:
    #      requires: 
    #        - create_infrastructure
    #  - configure_infrastructure:
    #      requires:
    #        - get_EC2_IP
    #  - smoke_test:
    #      requires:
    #        - configure_infrastructure
      - create_and_deploy_front_end
      - get_last_deployment_id:
          requires:
            - create_and_deploy_front_end


